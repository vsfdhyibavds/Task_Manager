def test_add_task_command(mock_create_task, runner):
    mock_create_task.return_value = {"message": "Task created", "task_id": 1}

    inputs = "\n".join([
        "Test Task",          # title
        "Test Description",   # description
        "2024-12-31",         # due_date
        "1",                  # priority_id
        "1",                  # category_id
        "1"                   # user_id
    ])

    result = runner.invoke(cli, ['add'], input=inputs)

    assert result.exit_code == 0
    assert "Task created with ID: 1" in result.output
    mock_create_task.assert_called_once_with(
        title="Test Task",
        description="Test Description",
        due_date=pytest.approx("2024-12-31", rel=1),
        priority_id=1,
        category_id=1,
        user_id=1
    )
=======
@patch('commands.task_commands.create_task')
def test_add_task_command(mock_create_task, runner):
    mock_create_task.return_value = {"message": "Task created", "task_id": 1}

    inputs = "\n".join([
        "Test Task",          # title
        "Test Description",   # description
        "2024-12-31",         # due_date
        "1",                  # priority_id
        "1",                  # category_id
        "1"                   # user_id
    ])

    result = runner.invoke(cli, ['add'], input=inputs)

    assert result.exit_code == 0
    assert "Task created with ID: 1" in result.output
    mock_create_task.assert_called_once_with(
        title="Test Task",
        description="Test Description",
        due_date=pytest.approx("2024-12-31", rel=1),
        priority_id=1,
        category_id=1,
        user_id=1
    )

@patch('commands.task_commands.delete_task')
def test_delete_task_command(mock_delete_task, runner):
    mock_delete_task.return_value = {"message": "Task deleted"}

    inputs = "\n".join([
        "1",  # task_id
        "1"   # user_id
    ])

    result = runner.invoke(cli, ['delete'], input=inputs)

    assert result.exit_code == 0
    assert "Task deleted" in result.output
    mock_delete_task.assert_called_once_with(1, 1)
